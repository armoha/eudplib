import py_random;
import py_itertools;
import collections.deque;
const testArray = [1, 2, 3, 4];
function test_write() {
    const ret = py_list();

    const u32 = py_eval("lambda: random.randint(1, 0xFFFFFFFF)");
    const shift = py_eval("lambda: random.randint(0, 31)");

    const num = u32(), u32(), u32(), u32(), u32(), u32(),
        shift(), shift(), u32(), u32(), u32();
    const numV = EUDArray(num);
    const numS = num, numV;
    setcurpl(getuserplayerid());
    const dbg = StringBuffer(3000);
    dbg.insert(0);
    foreach(vals : numS) {
        var expect = vals[0];
        expect += vals[1];
        expect -= vals[2];
        dbg.appendf("\n\x07{:x}\x02 *= {:x}", expect, vals[3],);
        expect *= vals[3];
        var temp = expect;
        dbg.appendf(" -> \x07{:x}\x02 /= {:x}", expect, vals[4],);
        expect /= vals[4];
        temp += expect;
        dbg.appendf(" -> \x07{}\x02 %= {:x}", expect, vals[5],);
        expect %= vals[5];
        temp += expect;
        dbg.appendf(" -> \x07{}\x02 <<= {}", expect, vals[6],);
        expect <<= vals[6];
        temp += expect;
        dbg.appendf(" -> \x07{:x}\x02 >>= {}", expect, vals[7],);
        expect >>= vals[7];
        temp += expect;
        // expect **= ;
        // temp += expect;
        dbg.appendf(" -> \x07{}\x02 &= {:x}", expect, vals[8]);
        expect &= vals[8];
        temp += expect;
        dbg.appendf(" -> \x07{}\x02 |= {:x}", expect, vals[9]);
        expect |= vals[9];
        temp += expect;
        dbg.appendf(" -> \x07{:x}", expect);
        expect ^= vals[10];
        temp += expect;
        ret.append(temp);
    }
    const pvar, arr = PVariable(), EUDArray(8);
    var v1, v2 = pvar, arr;
    const pvarV, arrV = PVariable.cast(v1), EUDArray.cast(v2);

    const index = py_eval("random.randint(0, 7)");
    var indexV = index;

    foreach(arr, i, vals : py_eval("itertools.product(\
        (pvar, arr, pvarV, arrV), (index, indexV), (num, numV)\
    )")) {
        arr[i] = vals[0];
        arr[i] += vals[1];
        arr[i] -= vals[2];
        arr[i] *= vals[3];
        var temp = arr[i];
        arr[i] /= vals[4];
        temp += arr[i];
        arr[i] %= vals[5];
        temp += arr[i];
        arr[i] <<= vals[6];
        temp += arr[i];
        arr[i] >>= vals[7];
        temp += arr[i];
        // arr[i] **= ;
        // temp += arr[i];
        arr[i] &= vals[8];
        temp += arr[i];
        arr[i] |= vals[9];
        temp += arr[i];
        arr[i] ^= vals[10];
        temp += arr[i];
        ret.append(temp);
    }
    dbg.Display();

    return List2Assignable(ret);
}
function test_compare() {
    const ret = py_list();
    const num = py_eval("[random.randint(1, 0xFFFFFFFF) for _ in range(11)]");
    const numV = EUDArray(num);

    const pvar, arr = PVariable(), EUDArray(8);
    var v1, v2 = pvar, arr;
    const pvarV, arrV = PVariable.cast(v1), EUDArray.cast(v2);

    const index = py_eval("random.randint(0, 7)");
    var indexV = index;

    foreach(arr, i, vals : py_eval("itertools.product(\
        (pvar, arr, pvarV, arrV), (index, indexV), (num, numV)\
    )")) {
        var temp = 0;
        arr[i] = vals[0];
        if (arr[i] == vals[1]) temp += 1 << 1;
        if (arr[i] != vals[2]) temp += 1 << 2;
        if (arr[i] >= vals[3]) temp += 1 << 3;
        if (arr[i] <= vals[4]) temp += 1 << 4;
        if (arr[i] > vals[5]) temp += 1 << 5;
        if (arr[i] < vals[6]) temp += 1 << 6;
        ret.append(temp);
    }

    return List2Assignable(ret);
}
const q8 = EUDQueue(8)();
function test_queue() {
    var ret = 0;
    ret += q8.empty() ? 0b1 : 0;  // ret = 1
    q8.append(1);
    q8.append(EUDVariable(2));
    ret += 1 << q8.popleft();  // pop 1, ret = 3
    q8.append(EUDVariable(3));
    ret += q8.empty() ? 0x80000000 : 0;
    ret += q8.popleft() == 2 ? 0b100 : 0;  // pop 2, ret = 7
    ret += q8.popleft() == 3 ? 0b1000 : 0;  // pop 3, ret = 15
    ret += q8.empty() ? 0b10000 : 0;  // ret = 31
    return ret;
}
function test_queue_wraparound() {
    const q3 = EUDQueue(3)();
    const ret = EUDCreateVariables(6);
    var iter = 0;
    // no element in queue: no-op
    foreach(v : q3) { ret[0] += v; iter++; }
    q3.append(1);
    q3.append(2);
    // 3 = 1 + 2
    foreach(v : q3) { ret[1] += v; iter++; }
    q3.append(3);
    q3.append(4);
    // 9 = 2 + 3 + 4
    foreach(v : q3) { ret[2] += v; iter++; }
    q3.append(5);
    // 12 = 3 + 4 + 5
    foreach(v : q3) { ret[3] += v; iter++; }
    q3.popleft();
    // 9 = 4 + 5
    foreach(v : q3) { ret[4] += v; iter++; }
    q3.append(6);
    q3.append(7);
    // 20 = 6 + 7 + 7
    foreach(v : q3) {
        if (v == 5) continue;
        ret[5] += v; 
        EUDSetContinuePoint();
        iter++;
    }
    q3.append(8);
    q3.append(9);
    foreach(v : q3) {
        if (v == 8) break;
        ret[5] += v; iter++;
    }
    ret.append(iter);
    return List2Assignable(ret);
}
const methods = py_eval('{\
    "append": "a",   "appendleft": "aL",\
    "pop":    "p",   "popleft":    "pL"\
}');
const DequeCases = py_eval('random.sample(sorted(methods), 27, counts=[9, 9, 9, 9])');
const DequeTest = py_eval("''.join(methods[name] for name in DequeCases)");
const dq = EUDDeque(7)();
function test_deque() {
    const ret = py_list();
    var pushes = 1;
    const a = function () { dq.append(pushes); pushes++; };
    const aL = function () { dq.appendleft(pushes); pushes++; };
    const _p = function() { if (dq.empty()) return 0; else return dq.pop(); };
    const _pL = function() { if (dq.empty()) return 0; else return dq.popleft(); };
    const p = py_eval('lambda s=ret, f=_p: s.append(f())');
    const pL = py_eval('lambda s=ret, f=_pL: s.append(f())');
    const methodMap = py_eval('{\
        "append":     a,    "pop":     p,\
        "appendleft": aL,   "popleft": pL,\
    }');
    foreach(method : DequeCases) { methodMap[method](); }
    var sum = dq.length;
    foreach(element: dq) { sum += element; }
    ret.append(sum);
    return List2Assignable(ret);
}
