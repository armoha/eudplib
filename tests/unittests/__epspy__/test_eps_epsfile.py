## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _LVAR(vs):
    ret, ops = [], []
    for v in FlattenList(vs):
        if IsEUDVariable(v) and v.IsRValue():
            ret.append(v.makeL())
        else:
            nv = EUDVariable()
            ret.append(nv)
            ops.append((nv, SetTo, v))
    if ops:
        SeqCompute(ops)
    return List2Assignable(ret)

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) function square();
# (Line 3) const a = [
# (Line 4) square(1),
# (Line 5) square(2),
# (Line 6) square(3),
# (Line 7) square(4),
# (Line 8) square(5)
# (Line 9) ];
a = _CGFW(lambda: [_ARR(FlattenList([f_square(1), f_square(2), f_square(3), f_square(4), f_square(5)]))], 1)[0]
# (Line 11) function square(x) {
@EUDFunc
def f_square(x):
    # (Line 12) const z = EUDArray(5);
    z = EUDArray(5)
    # (Line 13) return x * x; // + z.k;
    EUDReturn(x * x)
    # (Line 14) }
    # (Line 16) function constv_thing() {

@EUDFunc
def f_constv_thing():
    # (Line 17) return a[0] + a[1] + a[2] + a[3] + a[4];
    EUDReturn(a[0] + a[1] + a[2] + a[3] + a[4])
    # (Line 18) }
    # (Line 20) function switch_test(): EUDArray {

@EUDTypedFunc([], [EUDArray])
def f_switch_test():
    # (Line 21) const ret = EUDArray(6);
    ret = EUDArray(6)
    # (Line 22) static var x = 1234;
    x = EUDVariable(1234)
    # (Line 23) static var s = EPD(x.getValueAddr());
    s = EUDVariable(EPD(x.getValueAddr()))
    # (Line 25) epdswitch (s, 240) {
    EPDSwitch(s, 240)
    # (Line 26) case 96:
    _t1 = EUDSwitchCase()
    # (Line 27) x += 1;
    if _t1(96):
        x.__iadd__(1)
        # (Line 28) break;
        EUDBreak()
        # (Line 29) case 160:
    _t2 = EUDSwitchCase()
    # (Line 30) x += 3;
    if _t2(160):
        x.__iadd__(3)
        # (Line 31) break;
        EUDBreak()
        # (Line 32) case 208:  // OK
    _t3 = EUDSwitchCase()
    # (Line 33) x += 5;
    if _t3(208):
        x.__iadd__(5)
        # (Line 34) break;
        EUDBreak()
        # (Line 35) default:
    # (Line 36) x = 0;
    if EUDSwitchDefault()():
        x << (0)
        # (Line 37) }
    # (Line 38) ret[0] = x;  // 1239
    EUDEndSwitch()
    _ARRW(ret, 0) << (x)
    # (Line 41) epdswitch (s, 56) {
    EPDSwitch(s, 56)
    # (Line 42) case 8:
    _t4 = EUDSwitchCase()
    # (Line 43) x += 2;
    if _t4(8):
        x.__iadd__(2)
        # (Line 44) break;
        EUDBreak()
        # (Line 45) case 16:  // OK
    _t5 = EUDSwitchCase()
    # (Line 46) x += 4;
    if _t5(16):
        x.__iadd__(4)
        # (Line 47) break;
        EUDBreak()
        # (Line 48) case 24:
    _t6 = EUDSwitchCase()
    # (Line 49) x += 6;
    if _t6(24):
        x.__iadd__(6)
        # (Line 50) break;
        EUDBreak()
        # (Line 51) case 32:
    _t7 = EUDSwitchCase()
    # (Line 52) x += 8;
    if _t7(32):
        x.__iadd__(8)
        # (Line 53) break;
        EUDBreak()
        # (Line 54) default:
    # (Line 55) x = 0;
    if EUDSwitchDefault()():
        x << (0)
        # (Line 56) }
    # (Line 57) ret[1] = x;  // 1243
    EUDEndSwitch()
    _ARRW(ret, 1) << (x)
    # (Line 60) switch (x, 432) {
    EUDSwitch(x, 432)
    # (Line 61) case 16:
    _t8 = EUDSwitchCase()
    # (Line 62) case 144:  // OK
    if _t8(16):
        pass
    _t9 = EUDSwitchCase()
    # (Line 63) x += 3;
    if _t9(144):
        x.__iadd__(3)
        # (Line 64) break;
        EUDBreak()
        # (Line 65) default:
    # (Line 66) x = 0;
    if EUDSwitchDefault()():
        x << (0)
        # (Line 67) }
    # (Line 68) ret[2] = x;  // 1246
    EUDEndSwitch()
    _ARRW(ret, 2) << (x)
    # (Line 71) switch (x, 211) {
    EUDSwitch(x, 211)
    # (Line 72) case 208:
    _t10 = EUDSwitchCase()
    # (Line 73) x += 5;
    if _t10(208):
        x.__iadd__(5)
        # (Line 74) break;
        EUDBreak()
        # (Line 75) case 210:
    _t11 = EUDSwitchCase()
    # (Line 76) x += 10;
    if _t11(210):
        x.__iadd__(10)
        # (Line 77) break;
        EUDBreak()
        # (Line 78) case 211:
    _t12 = EUDSwitchCase()
    # (Line 79) x += 15;
    if _t12(211):
        x.__iadd__(15)
        # (Line 80) break;
        EUDBreak()
        # (Line 81) default:
    # (Line 82) x = 0;
    if EUDSwitchDefault()():
        x << (0)
        # (Line 83) }
    # (Line 84) ret[3] = x;  // 1256
    EUDEndSwitch()
    _ARRW(ret, 3) << (x)
    # (Line 87) switch (x, 373) {
    EUDSwitch(x, 373)
    # (Line 88) case 96:  // OK
    _t13 = EUDSwitchCase()
    # (Line 89) x += 2;
    if _t13(96):
        x.__iadd__(2)
        # (Line 90) break;
        EUDBreak()
        # (Line 91) case 100:
    _t14 = EUDSwitchCase()
    # (Line 92) x += 5;
    if _t14(100):
        x.__iadd__(5)
        # (Line 93) break;
        EUDBreak()
        # (Line 94) case 112:
    _t15 = EUDSwitchCase()
    # (Line 95) x += 8;
    if _t15(112):
        x.__iadd__(8)
        # (Line 96) break;
        EUDBreak()
        # (Line 97) case 116:
    _t16 = EUDSwitchCase()
    # (Line 98) x += 11;
    if _t16(116):
        x.__iadd__(11)
        # (Line 99) break;
        EUDBreak()
        # (Line 100) default:
    # (Line 101) x = 0;
    if EUDSwitchDefault()():
        x << (0)
        # (Line 102) }
    # (Line 103) ret[4] = x;  // 1258
    EUDEndSwitch()
    _ARRW(ret, 4) << (x)
    # (Line 106) switch (x, 511) {
    EUDSwitch(x, 511)
    # (Line 107) case 121:
    _t17 = EUDSwitchCase()
    # (Line 108) x += 1;
    if _t17(121):
        x.__iadd__(1)
        # (Line 109) break;
        EUDBreak()
        # (Line 110) case 179:
    _t18 = EUDSwitchCase()
    # (Line 111) x += 4;
    if _t18(179):
        x.__iadd__(4)
        # (Line 112) break;
        EUDBreak()
        # (Line 113) case 234:  // OK
    _t19 = EUDSwitchCase()
    # (Line 114) x += 2;
    if _t19(234):
        x.__iadd__(2)
        # (Line 115) break;
        EUDBreak()
        # (Line 116) case 338:
    _t20 = EUDSwitchCase()
    # (Line 117) x += 8;
    if _t20(338):
        x.__iadd__(8)
        # (Line 118) break;
        EUDBreak()
        # (Line 119) case 428:
    _t21 = EUDSwitchCase()
    # (Line 120) x += 5;
    if _t21(428):
        x.__iadd__(5)
        # (Line 121) break;
        EUDBreak()
        # (Line 122) case 453:
    _t22 = EUDSwitchCase()
    # (Line 123) x += 7;
    if _t22(453):
        x.__iadd__(7)
        # (Line 124) break;
        EUDBreak()
        # (Line 125) default:
    # (Line 126) x = 0;
    if EUDSwitchDefault()():
        x << (0)
        # (Line 127) }
    # (Line 128) ret[5] = x;  // 1260
    EUDEndSwitch()
    _ARRW(ret, 5) << (x)
    # (Line 129) return ret;
    EUDReturn(ret)
    # (Line 130) }
